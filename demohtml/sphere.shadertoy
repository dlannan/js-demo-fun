float sdGuy(in vec3 pos)
{
   float t = fract(iTime);
   float y = 2.0 * t * (1.0-t);
   vec3 cen = vec3(0.0, y, 0.0);
   float d1 = length(pos-cen)-0.25;
   return d1;
}
float map(in vec3 pos)
{
  float d1 = sdGuy(pos);
  float d2 = pos.y - (-0.25);
  return min(d1,d2);
}
vec3 calcNormal(in vec3 pos)
{
  vec2 e = vec2(0.0001, 0.0);
  return normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),
                        map(pos+e.yxy)-map(pos-e.yxy),
                        map(pos+e.yyx)-map(pos-e.yyx)));
}
float castRay(in vec3 ro, vec3 rd)
{
  float t = 0.0;
  for (int i=0; i<100; i++)
  {
      vec3 pos = ro+(t*rd);
      float h = map(pos);
      if (h < 0.001)
          break;
      t += h;
      if (t>20.0)
          break;
  }
  if (t>20.0)
      t= -1.0;
  return t;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;
  float an = iTime*0.1;
  vec3 ro = vec3(1.0*sin(an), 0.0, 1.0*cos(an));
  vec3 ta = vec3(0.0,0.0,0.0);
  vec3 ww = normalize(ta-ro);
  vec3 uu = normalize(cross(ww, vec3(0,1,0)));
  vec3 vv = normalize(cross(uu, ww));
  vec3 rd = normalize(vec3(p.x * uu + p.y*vv +1.5*ww));
  vec3 col = vec3(0.35, 0.45, 1.0) - 0.7*rd.y;
  col = mix(col, vec3(0.7,0.75,0.8), exp(-10.0*rd.y));
  float t = castRay(ro, rd);
  if (t >0.0)
  {
      vec3 pos = ro + t*rd;
      vec3 nor = calcNormal(pos);
      vec3 mate = vec3(0.18);
      vec3 sun_dir = normalize(vec3(0.8,0.4,0.2));
      float sun_dif = clamp(dot(nor,sun_dir), 0.0, 1.0);
      float sun_shad = step(castRay(pos + nor*0.001, sun_dir), 0.0);
      float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0,1.0,0.0)), 0.0, 1.0);
      float bounce_dif = clamp(0.5 - 0.5*dot(nor, vec3(0.0,1.0,0.0)), 0.0, 1.0);
      col = mate*vec3(7.0, 4.5, 3.0) * sun_dif * sun_shad;
      col += mate*vec3(0.5, 0.8, 0.9) * sky_dif;
      col += mate*vec3(0.7,0.3, 0.2) * bounce_dif;
  }
  col = pow(col, vec3(0.4545));
  // Output to screen
  fragColor = vec4(col,1.0);
}